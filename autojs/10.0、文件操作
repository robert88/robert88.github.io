

// console: 控制台。记录运行的日志、错误、信息等。
// 全局对象
// keys: 按键模拟。比如音量键、Home键模拟等。
//安卓7.0以上的触摸和手势模拟
//基于控件的操作
// device: 设备。获取设备屏幕宽高、系统版本等信息，控制设备音量、亮度等。
// events: 事件与监听。按键监听，通知监听，触摸监听等。
// http: HTTP。发送HTTP请求，例如GET, POST等。
// engines: 脚本引擎。用于启动其他脚本。
// files: 文件系统。文件创建、获取信息、读写。
// images, colors: 图片和图色处理。截图，剪切图片，找图找色，读取保存图片等。
// app: 应用。启动应用，卸载应用，使用应用查看、编辑文件、访问网页，发送应用间广播等。
// floaty: 悬浮窗。用于显示自定义的悬浮窗。
// shell: Shell命令。
// threads: 多线程支持。
// ui: UI界面。用于显示自定义的UI界面，和用户交互。
// 除此之外，Auto.js内置了对Promise。

//接下来我们将按这个顺序来学习

files文件系统

sd卡路径
"/sdcard"

内部存储
"/storage"

执行的脚本将放到
"/storage/emulated/0/脚本/"

files.isFile(path)//如果文件不存在也是返回false
files.isDir(path)
files.isEmptyDir(path)
files.exists(path)

files.join(parent, child)//合并路径
这个可以自动补全/，和去掉重复的/
不能处理..
files.create(path)创建一个文件或文件夹并返回是否创建成功
目前测试发现这个只能创建文件
files.create("/sdcard/autojs/")
files.create("/sdcard/autojs")这个是写了一个autojs的文件

files.createWithDirs(path) //可以创建多层文件夹

一次性的文件读写可以直接使用, files.write(), files.append()等方便的函数，
但如果需要频繁读写或随机读写，则使用open()函数打开一个文件对象来操作文件，并在操作完毕后调用close()函数关闭文件。
