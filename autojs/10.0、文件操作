

// console: 控制台。记录运行的日志、错误、信息等。
// 全局对象
// keys: 按键模拟。比如音量键、Home键模拟等。
//安卓7.0以上的触摸和手势模拟
//基于控件的操作
// device: 设备。获取设备屏幕宽高、系统版本等信息，控制设备音量、亮度等。
// events: 事件与监听。按键监听，通知监听，触摸监听等。
// http: HTTP。发送HTTP请求，例如GET, POST等。
// engines: 脚本引擎。用于启动其他脚本。
// files: 文件系统。文件创建、获取信息、读写。
// images, colors: 图片和图色处理。截图，剪切图片，找图找色，读取保存图片等。
// app: 应用。启动应用，卸载应用，使用应用查看、编辑文件、访问网页，发送应用间广播等。
// floaty: 悬浮窗。用于显示自定义的悬浮窗。
// shell: Shell命令。
// threads: 多线程支持。
// ui: UI界面。用于显示自定义的UI界面，和用户交互。
// 除此之外，Auto.js内置了对Promise。

//接下来我们将按这个顺序来学习

files文件系统

sd卡路径
"/sdcard"

内部存储
"/storage"

执行的脚本将放到
"/storage/emulated/0/脚本/"

files.isFile(path)//如果文件不存在也是返回false
files.isDir(path)
files.isEmptyDir(path)
files.exists(path)

files.join(parent, child)//合并路径
这个可以自动补全/，和去掉重复的/
不能处理..
files.create(path)创建一个文件或文件夹并返回是否创建成功
目前测试发现这个只能创建文件
files.create("/sdcard/autojs/")
files.create("/sdcard/autojs")这个是写了一个autojs的文件

files.createWithDirs(path) //可以创建多层文件夹
files.ensureDir(path) //确保路径path所在的文件夹存在。如果该路径所在文件夹不存在，则创建该文件夹。

一次性的文件读写可以直接使用, files.write(), files.append()等方便的函数，
但如果需要频繁读写或随机读写，则使用open()函数打开一个文件对象来操作文件，并在操作完毕后调用close()函数关闭文件。

.read(path[, encoding = "utf-8"])
读取文本文件path的所有内容并返回。如果文件不存在，则抛出FileNotFoundException。
.readBytes(path)//用于读图片
读取文件path的所有内容并返回一个字节数组。如果文件不存在，则抛出FileNotFoundException。

files.write(path, text[, encoding = "utf-8"])
把text写入到文件path中。如果文件存在则覆盖，不存在则创建。
.writeBytes(path, bytes)
把bytes写入到文件path中。如果文件存在则覆盖，不存在则创建。
.append(path, text[, encoding = 'utf-8'])
把text追加到文件path的末尾。如果文件不存在则创建。

Type to search
Auto.js文档
首页
Q&A
如何阅读本文档 - Documentation
应用 - App
一般全局函数 - Globals
控制台 - Console
基于坐标的操作 - CoordinatesBasedAutomation
设备 - Device
对话框 - Dialogs
脚本引擎 - Engines
事件与监听 - Events
悬浮窗 - Floaty
文件系统 - Files
files.isFile(path)
files.isDir(path)
files.isEmptyDir(path)
files.join(parent, child)
files.create(path)
files.createWithDirs(path)
files.exists(path)
files.ensureDir(path)
files.read(path[, encoding = "utf-8"])
files.readBytes(path)
files.write(path, text[, encoding = "utf-8"])
files.writeBytes(path, bytes)
files.append(path, text[, encoding = 'utf-8'])
files.appendBytes(path, text[, encoding = 'utf-8'])
files.copy(fromPath, toPath)
files.move(fromPath, toPath)
files.rename(path, newName)
files.renameWithoutExtension(path, newName)
files.getName(path)
files.getNameWithoutExtension(path)
files.getExtension(path)
files.remove(path)
files.removeDir(path)
files.getSdcardPath()
files.cwd()
files.path(relativePath)
files.listDir(path[, filter])
open(path[, mode = "r", encoding = "utf-8", bufferSize = 8192])
ReadableTextFile
ReadableTextFile.read()
ReadableTextFile.read(maxCount)
ReadableTextFile.readline()
ReadableTextFile.readlines()
close()
PWritableTextFile
PWritableTextFile.write(text)
PWritableTextFile.writeline(line)
PWritableTextFile.writelines(lines)
PWritableTextFile.flush()
PWritableTextFile.close()
HTTP - Http
图片与颜色 - Images
画布 - Canvas
按键模拟 - Keys
多媒体 - Media
模块 - Modules
基于控件的操作 - WidgetsBaseAutomation
传感器 - Sensor
Shell - Shell
本地储存 - Storages
多线程 - Threads
定时器 - Timers
用户界面 - UI
调用Java - Work with Java
Files
Stability: 2 - Stable

files模块提供了一些常见的文件处理，包括文件读写、移动、复制、删掉等。

一次性的文件读写可以直接使用files.read(), files.write(), files.append()等方便的函数，但如果需要频繁读写或随机读写，则使用open()函数打开一个文件对象来操作文件，并在操作完毕后调用close()函数关闭文件。

files.isFile(path)
path {string} 路径
返回 {boolean}
返回路径path是否是文件。

log(files.isDir("/sdcard/文件夹/")); //返回false
log(files.isDir("/sdcard/文件.txt")); //返回true
files.isDir(path)
path {string} 路径
返回 {boolean}
返回路径path是否是文件夹。

log(files.isDir("/sdcard/文件夹/")); //返回true
log(files.isDir("/sdcard/文件.txt")); //返回false
files.isEmptyDir(path)
path {string} 路径
返回 {boolean}
返回文件夹path是否为空文件夹。如果该路径并非文件夹，则直接返回false。

files.join(parent, child)
parent {string} 父目录路径
child {string} 子路径
返回 {string}
连接两个路径并返回，例如files.join("/sdcard/", "1.txt")返回"/sdcard/1.txt"。

files.create(path)
path {string} 路径
返回 {boolean}
创建一个文件或文件夹并返回是否创建成功。如果文件已经存在，则直接返回false。

files.create("/sdcard/新文件夹/");
files.createWithDirs(path)
path {string} 路径
返回 {boolean}
创建一个文件或文件夹并返回是否创建成功。如果文件所在文件夹不存在，则先创建他所在的一系列文件夹。如果文件已经存在，则直接返回false。

files.createWithDirs("/sdcard/新文件夹/新文件夹/新文件夹/1.txt");
files.exists(path)
path {string} 路径
返回 {boolean}
返回在路径path处的文件是否存在。

files.ensureDir(path)
path {string} 路径
确保路径path所在的文件夹存在。如果该路径所在文件夹不存在，则创建该文件夹。

例如对于路径"/sdcard/Download/ABC/1.txt"，如果/Download/文件夹不存在，则会先创建Download，再创建ABC文件夹。

files.read(path[, encoding = "utf-8"])
path {string} 路径
encoding {string} 字符编码，可选，默认为utf-8
返回 {string}
读取文本文件path的所有内容并返回。如果文件不存在，则抛出FileNotFoundException。

log(files.read("/sdcard/1.txt"));
files.readBytes(path)
path {string} 路径
返回 {byte[]}
读取文件path的所有内容并返回一个字节数组。如果文件不存在，则抛出FileNotFoundException。

注意，该数组是Java的数组，不具有JavaScript数组的forEach, slice等函数。

一个以16进制形式打印文件的例子如下:

var data = files.readBytes("/sdcard/1.png");
var sb = new java.lang.StringBuilder();
for(var i = 0; i < data.length; i++){
    sb.append(data[i].toString(16));
}
log(sb.toString());
files.write(path, text[, encoding = "utf-8"])
path {string} 路径
text {string} 要写入的文本内容
encoding {string} 字符编码
把text写入到文件path中。如果文件存在则覆盖，不存在则创建。

var text = "文件内容";
//写入文件
files.write("/sdcard/1.txt", text);
//用其他应用查看文件
app.viewFile("/sdcard/1.txt");
files.writeBytes(path, bytes)
path {string} 路径
bytes {byte[]} 字节数组，要写入的二进制数据
把bytes写入到文件path中。如果文件存在则覆盖，不存在则创建。

files.append(path, text[, encoding = 'utf-8'])
path {string} 路径
text {string} 要写入的文本内容
encoding {string} 字符编码
把text追加到文件path的末尾。如果文件不存在则创建。

var text = "追加的文件内容";
files.append("/sdcard/1.txt", text);
files.append("/sdcard/1.txt", text);
//用其他应用查看文件
app.viewFile("/sdcard/1.txt");
files.appendBytes(path, text[, encoding = 'utf-8'])

.copy(fromPath, toPath)
.move(fromPath, toPath)
.rename(path, newName)

.renameWithoutExtension(path, newName)
重命名文件，不包含拓展名，并返回是否重命名成功。例如files.rename("/sdcard/1.txt", "2")会把"1.txt"重命名为"2.txt"。

.getName(path)
返回文件的文件名。例如files.getName("/sdcard/1.txt")返回"1.txt"
files.getNameWithoutExtension(path)
返回不含拓展名的文件的文件名。例如files.getName("/sdcard/1.txt")返回"1"。
.getExtension(path)
返回文件的拓展名。例如files.getExtension("/sdcard/1.txt")返回"txt"
.remove(path)
删除文件或空文件夹，返回是否删除成功。
removeDir(path)

.getSdcardPath()
返回SD卡路径。所谓SD卡，即外部存储器。
.cwd()
返回脚本的"当前工作文件夹路径"

files.path(relativePath)
返回相对路径对应的绝对路径。例如files.path("./1.png")，如果运行这个语句的脚本位于文件夹"/sdcard/脚本/"中，则返回"/sdcard/脚本/1.png"。

files.listDir(path[, filter])

open(path[, mode = "r", encoding = "utf-8", bufferSize = 8192])
path {string} 文件路径，例如"/sdcard/1.txt"。
mode {string} 文件打开模式，包括:
"r": 只读文本模式。该模式下只能对文件执行文本读取操作。
"w": 只写文本模式。该模式下只能对文件执行文本覆盖写入操作。
"a": 附加文本模式。该模式下将会把写入的文本附加到文件末尾。
"rw": 随机读写文本模式。该模式下将会把写入的文本附加到文件末尾。
目前暂不支持二进制模式，随机读写模式。
encoding {string} 字符编码。
bufferSize {number} 文件读写的缓冲区大小。

"r": 返回一个ReadableTextFile对象。
"w", "a": 返回一个WritableTextFile对象。

。

ReadableTextFile
可读文件对象。

.read()
返回该文件剩余的所有内容的字符串。

.read(maxCount)
maxCount {Number} 最大读取的字符数量
读取该文件接下来最长为maxCount的字符串并返回。即使文件剩余内容不足maxCount也不会出错。
.readline()
读取一行并返回（不包含换行符）。
.readlines()
读取剩余的所有行，并返回它们按顺序组成的字符串数组。
close()
关闭该文件


打开一个文件不再使用时务必关闭

PWritableTextFile
可写文件对象。

.write(text)
把文本内容text写入到文件中。
.writeline(line)
把文本line写入到文件中并写入一个换行符。
.writelines(lines)//lines {Array} 字符串数组
把很多行写入到文件中....
.flush()
把缓冲区内容输出到文件中。
.close()
