
// console: 控制台。记录运行的日志、错误、信息等。
// 全局对象
// keys: 按键模拟。比如音量键、Home键模拟等。
//安卓7.0以上的触摸和手势模拟
//基于控件的操作
// device: 设备。获取设备屏幕宽高、系统版本等信息，控制设备音量、亮度等。
// events: 事件与监听。按键监听，通知监听，触摸监听等。
// http: HTTP。发送HTTP请求，例如GET, POST等。
// engines: 脚本引擎。用于启动其他脚本。
// files: 文件系统。文件创建、获取信息、读写。
// images, colors: 图片和图色处理。截图，剪切图片，找图找色，读取保存图片等。
// app: 应用。启动应用，卸载应用，使用应用查看、编辑文件、访问网页，发送应用间广播等。
// floaty: 悬浮窗。用于显示自定义的悬浮窗。
// shell: Shell命令。
// threads: 多线程支持。
// ui: UI界面。用于显示自定义的UI界面，和用户交互。
// 除此之外，Auto.js内置了对Promise。

//接下来我们将按这个顺序来学习


//sleep(5000)
//延时，时间为毫秒，即sleep后面的代码都延时5000毫秒

//setClip,getClip对全局的剪切，复制操作，跨app有效

//toast(message)
//这个是可以停止的，toast是异步的，执行了toast就不能中途停止显示
for(var i = 0; i < 100; i++){
  toast(i);
  sleep(2000);
}

//toastLog(message)
会执行toast和console.log

//exit()
在我的手机上并没有立即停止

currentPackage()
currentActivity()
waitForActivity()
waitForPackage()
//https://blog.csdn.net/fjnu_se/article/details/80703815

这个需要了解一下andriod的activity
//random(min, max)//这个有bug，尽量取整
//random() [0,1)


//requiresApi(19)
//Android 7.0： 24
//Android 6.0： 23
//Android 5.1： 22
//Android 5.0： 21
//Android 4.4W： 20
//Android 4.4： 19
//Android 4.3： 18

//requiresAutojsVersion("3.2.0")
//"3.0.0 Beta", "3.1.0 Alpha4", "3.2.0"
都是对环境的检查

//runtime.requestPermissions(["access_fine_location"]);
//https://developer.android.com/guide/topics/permissions/overview
//access_fine_location GPS权限,读取位置信息
//record_audio 录音权限

//尽管安卓有很多权限，但必须写入Manifest才能动态申请，为了防止权限的滥用，目前Auto.js只能额外申请两个权限：
//您可以通过APK编辑器来增加Auto.js以及Auto.js打包的应用的权限。

runtime.loadJar(path)
runtime.loadDex(path)

// 加载jsoup.jar
//runtime.loadJar("./jsoup.jar");
// 使用jsoup解析html
//importClass(org.jsoup.Jsoup);
//log(Jsoup.parse(files.read("./test.html")));
//https://jsoup.org/download

//因为加载jar实际上是把jar转换为dex再加载的，因此加载dex文件会比jar文件快得多。可以使用Android SDK的build tools的dx工具把jar转换为dex。

//context
//全局变量。一个android.content.Context对象。
