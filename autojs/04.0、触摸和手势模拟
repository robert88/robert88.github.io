
// console: 控制台。记录运行的日志、错误、信息等。
// 全局对象
// keys: 按键模拟。比如音量键、Home键模拟等。
//安卓7.0以上的触摸和手势模拟
//基于控件的操作
// device: 设备。获取设备屏幕宽高、系统版本等信息，控制设备音量、亮度等。
// events: 事件与监听。按键监听，通知监听，触摸监听等。
// http: HTTP。发送HTTP请求，例如GET, POST等。
// engines: 脚本引擎。用于启动其他脚本。
// files: 文件系统。文件创建、获取信息、读写。
// images, colors: 图片和图色处理。截图，剪切图片，找图找色，读取保存图片等。
// app: 应用。启动应用，卸载应用，使用应用查看、编辑文件、访问网页，发送应用间广播等。
// floaty: 悬浮窗。用于显示自定义的悬浮窗。
// shell: Shell命令。
// threads: 多线程支持。
// ui: UI界面。用于显示自定义的UI界面，和用户交互。
// 除此之外，Auto.js内置了对Promise。

//接下来我们将按这个顺序来学习

click(x, y)(大约150毫秒)
模拟点击坐标(x, y)，并返回是否点击成功。
一般而言，只有点击过程中被其他事件中断(例如用户自行点击)才会点击失败
使用该函数模拟连续点击时可能有点击速度过慢的问题，这时可以用press()
SimpleActionAutomator这个是基于控件操作的，但是为了不分开这个api
click(text[, i])
这个是点击当前屏幕上的文字，i是第几个相同的文字
click(left, top, bottom, right)
注意，该函数一般只用于录制的脚本中使用，在自己写的代码中使用该函数一般不要使用该函数

longClick(x, y)（大约600毫秒）
模拟长按坐标(x, y), 并返回是否成功
longClick(text[, i]))

press(x, y, duration)
模拟按住坐标(x, y), 并返回是否成功
如果按住时间过短，那么会被系统认为是点击；如果时长超过500毫秒，则认为是长按。

swipe(x1, y1, x2, y2, duration)
模拟从坐标(x1, y1)滑动到坐标(x2, y2)

gesture(duration, [x1, y1], [x2, y2], ...)
duration {number} 手势的时长
[x, y] ... 手势滑动路径的一系列坐标

gestures([delay1, duration1, [x1, y1], [x2, y2], ...], [delay2, duration2, [x3, y3], [x4, y4], ...], ...)
同时模拟多个手势。每个手势的参数为[delay, duration, 坐标], delay为延迟多

RootAutomator
Stability: 2 - Stable
RootAutomator是一个使用root权限来模拟触摸的对象，用它可以完成触摸与多点触摸，
var ra = new RootAutomator();
events.on('exit', function(){
  ra.exit();
});
ra.tap(x, y[, id])
//执行一些点击操作
方法
tap点击位置(x, y)。
.swipe(x1, x2, y1, y2[, duration, id])模拟一次从(x1, y1)到(x2, y2)的时间为duration毫秒的滑动。
press(x, y, duration[, id])模拟按下位置(x, y)，时长为duration毫秒。
.longPress(x, y[\, id])模拟长按位置(x, y)。//id {number} 多点触摸id，可选，默认为1
.touchDown(x, y[, id])模拟手指按下位置(x, y)。
touchMove(x, y[, id]) 
.touchUp([id])模拟手指弹起。
